/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CurrencyTest;


import Currency.Tools;
import Currency.Currency;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;


class AppTest {

    Tools test = new Tools();
    Currency cur;

    @BeforeEach
    void init() throws ParseException {
        test.loadCurrencies("src/main/resource/Database.txt");
        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("01/09/2022");
        cur = new Currency("AUD",1.00,date1);
    }

    @Test
    void testLoadFile() {
        test.loadCurrencies("Database.txt");
        boolean check = false;
        if (test.Currencies.size() == 6){
            check = true;
        }
        assertTrue(check,"pass!");
    }

    @Test
    void testAddNewRate() throws ParseException {

        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        test.AddNewRate("USD", 0.70, date1);
        int num = 0;
        for (Currency currency : test.Currencies) {
            if (currency.currency.equals("USD")) {
                num = currency.rates.size();
            }
        }
        assertEquals(2, num,"pass");

    }

    @Test
    void testAddNewRateWithAUD() throws ParseException {

        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        test.AddNewRate("AUD", 0.9, date1);
        int num = 0;
        for (Currency currency : test.Currencies) {
            if (currency.currency.equals("USD")) {
                num = currency.rates.size();
            }
        }
        assertEquals(2, num,"pass");

    }

    @Test
    void testAddNewRateWithNoCurrency() throws ParseException {

        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        test.AddNewRate("UUU", 9.9, date1);
        double num = 0.0;
        for (Currency currency : test.Currencies) {
            if (currency.currency.equals("USD")) {
                num = currency.lastRate;
            }
        }
        assertEquals(0.0, num,"pass");

    }

    @Test
    void testUpdateTable() {
        String[] old = test.Popular;
        String[] arr = new String[4];
        arr[0] = "USD";
        arr[1] = "AUD";
        arr[2] = "NZD";
        arr[3] = "CAD";
        test.UpdateTable(arr);
        boolean check = false;
        if (!old.equals(test.Popular)){
            check = true;
        }
        assertTrue(check,"pass!");
    }

    @Test
    void testUpdateTableWithInvalid() {
        String[] old = test.Popular;
        String[] arr = new String[4];
        arr[0] = "USD";
        arr[1] = "AUD";
        arr[2] = "UUU";
        arr[3] = "CAD";
        test.UpdateTable(arr);
        boolean check = false;
        if (old.equals(test.Popular)){
            check = true;
        }
        assertTrue(check,"pass!");
    }

    @Test
    void testAddNewCurrency() throws ParseException {
        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        test.AddNewCurrency(0.99, "SGD", date1);
        assertEquals(7, test.Currencies.size(),"pass");
    }

    @Test
    void testAddNewCurrencyWithExist() throws ParseException {
        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        test.AddNewCurrency(0.99, "AUD", date1);
        assertEquals(6, test.Currencies.size(),"pass");
    }

    @Test
    void testGetArrayList() throws ParseException {
        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("01/09/2022");
        Date date2 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        ArrayList<Double> ls = test.getRatelist("AUD",date1,date2);
        boolean check = false;
        if (ls.size() == 1){
            check = true;
        }
        assertTrue(check,"pass!");
    }

    @Test
    void testGetArrayListWithInvalidCurrency() throws ParseException {
        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("01/09/2022");
        Date date2 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        ArrayList<Double> ls = test.getRatelist("SSS",date1,date2);
        boolean check = false;
        if (ls == null){
            check = true;
        }
        assertTrue(check,"pass!");
    }

    @Test
    void testgetAvg() {
        ArrayList<Double> str = new ArrayList<Double>();
        str.add(1.0);
        str.add(3.0);
        str.add(5.0);
        boolean check = false;
        if (test.getAvg(str).equals(3.00)){
            check = true;
        }
        assertTrue(check,"pass!");
    }
    @Test
    void testgetMedian() {
        ArrayList<Double> str = new ArrayList<Double>();
        str.add(1.0);
        str.add(3.0);
        str.add(5.0);
        boolean check = false;
        if (test.getMedian(str).equals(3.00)){
            check = true;
        }
        assertTrue(check,"pass!");

    }
    @Test
    void testgetMax() {
        ArrayList<Double> str = new ArrayList<Double>();
        str.add(1.0);
        str.add(3.0);
        str.add(5.0);
        boolean check = false;
        if (test.getMax(str).equals(5.00)){
            check = true;
        }
        assertTrue(check,"pass!");

    }
    @Test
    void testgetMin() {
        ArrayList<Double> str = new ArrayList<Double>();
        str.add(1.0);
        str.add(3.0);
        str.add(5.0);
        boolean check = false;
        if (test.getMin(str).equals(1.00)){
            check = true;
        }
        assertTrue(check,"pass!");

    }
    @Test
    void testgetSD() {
        ArrayList<Double> str = new ArrayList<Double>();
        str.add(1.0);
        str.add(3.0);
        str.add(5.0);
        boolean check = false;
        if (test.getSD(str).equals(1.632993161855452)){
            check = true;
        }
        assertTrue(check,"pass!");
    }

    @Test
    void testgetSDFailed() {
        ArrayList<Double> str = new ArrayList<Double>();
        str.add(10.0);
        str.add(3.90);
        str.add(5.08);
        boolean check = false;
        if (test.getSD(str).equals(2.64)){
            check = true;
        }
        assertFalse(check,"pass!");
    }

    @Test
    void testConvert(){
        Double num = test.convert(100.00,"AUD","USD");
        assertEquals(67,num,"pass");
    }

    @Test
    void testConvertWithOneNotExist(){
        Double num = test.convert(100.00,"AUD","USS");
        assertEquals(0.0,num,"pass");
    }

    @Test
    void testConvertWithBothNotExist(){
        Double num = test.convert(100.00,"AAA","USS");
        assertEquals(0.0,num,"pass");
    }

    @Test
    void testCurgetCur() {
        boolean check = false;
        if (cur.getCurrency().equals("AUD")){
            check = true;
        }
        assertTrue(check,"pass!");
    }

    @Test
    void testCurAdd() throws ParseException {
        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        cur.addNewRate(date1, 1.02);
        assertEquals(2,cur.rates.size());
    }

    @Test
    void testGetCurrentRate() throws ParseException {
        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        cur.addNewRate(date1, 1.02);
        boolean check = false;
        if (cur.getCurrentRate().equals(1.02)){
            check = true;
        }
        assertTrue(check,"pass!");
    }

    @Test
    void testComparison() throws ParseException {
        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        cur.addNewRate(date1, 1.00);
        boolean check = false;
        if (cur.getComparison().equals(0.0)){
            check = true;
        }
        assertTrue(check,"pass!");
    }
    @Test
    void testGetRateByDate() throws ParseException {
        Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse("02/09/2022");
        cur.addNewRate(date1, 1.02);
        boolean check = false;
        if (cur.getRateByDate(date1).equals(1.02)){
            check = true;
        }
        assertTrue(check,"pass!");
    }
}


